apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: linkedcollector
  annotations:
    linkerd.io/inject: enabled
spec:
  image: otel/opentelemetry-collector-contrib-dev:latest
  serviceAccount: otelcontribcol
  mode: daemonset
  hostNetwork: true
  ports:
    - name: metric
      port: 9090
      targetPort: 9090
      protocol: TCP
  env:
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
      opencensus:
      zipkin:
      jaeger:
        protocols:
          grpc:
          thrift_http:
          thrift_compact:
          thrift_binary:
      prometheus:
        config:
          scrape_configs:
            - job_name: 'linkerd-controller'
              kubernetes_sd_configs:
                - role: pod
                  namespaces:
                    names:
                      - linkerd
              relabel_configs:
                - source_labels:
                    - __meta_kubernetes_pod_container_port_name
                  action: keep
                  regex: admin-http
                - source_labels: [__meta_kubernetes_pod_container_name]
                  action: replace
                  target_label: component

            - job_name: 'linkerd-service-mirror'
              kubernetes_sd_configs:
                - role: pod
              relabel_configs:
                - source_labels:
                    - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
                    - __meta_kubernetes_pod_container_port_name
                  action: keep
                  regex: linkerd-service-mirror;admin-http$
                - source_labels: [__meta_kubernetes_pod_container_name]
                  action: replace
                  target_label: component

            - job_name: 'linkerd-proxy'
              kubernetes_sd_configs:
                - role: pod
              relabel_configs:
                - source_labels:
                    - __meta_kubernetes_pod_container_name
                    - __meta_kubernetes_pod_container_port_name
                    - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
                  action: keep
                  regex: ^linkerd-proxy;linkerd-admin;linkerd$
                - source_labels: [__meta_kubernetes_namespace]
                  action: replace
                  target_label: namespace
                - source_labels: [__meta_kubernetes_pod_name]
                  action: replace
                  target_label: pod
                  # special case k8s' "job" label, to not interfere with prometheus' "job"
                  #  label
                  # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
                  # k8s_job=foo
                - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
                  action: replace
                  target_label: k8s_job
                  # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
                - action: labeldrop
                  regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
                  # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
                  # deployment=foo
                - action: labelmap
                  regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
                  # drop all labels that we just made copies of in the previous labelmap
                - action: labeldrop
                  regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
                  # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
                  # foo=bar
                - action: labelmap
                  regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
                  # Copy all pod labels to tmp labels
                - action: labelmap
                  regex: __meta_kubernetes_pod_label_(.+)
                  replacement: __tmp_pod_label_$1
                  # Take `linkerd_io_` prefixed labels and copy them without the prefix
                - action: labelmap
                  regex: __tmp_pod_label_linkerd_io_(.+)
                  replacement:  __tmp_pod_label_$1
                  # Drop the `linkerd_io_` originals
                - action: labeldrop
                  regex: __tmp_pod_label_linkerd_io_(.+)
                  # Copy tmp labels into real labels
                - action: labelmap
                  regex: __tmp_pod_label_(.+)
    processors:
      batch:
        send_batch_max_size: 1000
        timeout: 30s
        send_batch_size : 800

      memory_limiter:
         check_interval: 1s
         limit_percentage: 70
         spike_limit_percentage: 30


      resourcedetection/gce:
        detectors: [env, gce]
        timeout: 2s
        override: true

      k8sattributes:
        auth_type: serviceAccount
        passthrough: false
        filter:
          node_from_env_var: K8S_NODE_NAME
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time

    exporters:


      logging:
        loglevel: debug

      otlphttp:
        endpoint: TENANTURL_TOREPLACE/api/v2/otlp
        headers:
           Authorization: "Api-Token DT_API_TOKEN_TO_REPLACE"

      dynatrace:
        # optional - Dimensions specified here will be included as a dimension on every exported metric
        #            unless that metric already has a dimension with the same key.
        # optional - prefix will be prepended to each metric name in prefix.name format
        prefix: linkerd
        endpoint: TENANTURL_TOREPLACE/api/v2/metrics/ingest
        # Token must at least have the Ingest metrics (metrics.ingest) permission
        api_token: "DT_API_TOKEN_TO_REPLACE"
    extensions:
      memory_ballast:
        size_in_percentage: 20


    service:
      extensions: [memory_ballast]
      pipelines:
        traces:
          receivers: [otlp,opencensus,zipkin,jaeger]
          processors: [memory_limiter,k8sattributes,batch]
          exporters: [otlphttp]
        metrics:
          receivers: [otlp,prometheus]
          processors: [memory_limiter,k8sattributes,resourcedetection/gce,batch]
          exporters: [dynatrace]